{"version":3,"sources":["../../src/connection/ConnectionMetadataBuilder.ts"],"names":[],"mappings":";;;;AAAA,yFAAoF;AACpF,6CAA0C;AAC1C,0CAA8C;AAE9C,kCAAgD;AAChD,mFAAgF;AAChF,oFAAiF;AAEjF,8DAA2D;AAI3D;;GAEG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,mCAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC5C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,mDAAe,GAAf,UAAgB,UAA+B;QACrC,IAAA,KAAA,eAA2C,mBAAQ,CAAC,sBAAsB,CAAC,UAAU,CAAC,IAAA,EAArF,gBAAgB,QAAA,EAAE,oBAAoB,QAA+C,CAAC;QAC7F,IAAM,mBAAmB,kEAAO,gBAAgB,mBAAK,6DAA4B,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,oBAAoB,CAAC,EAAC,CAAC;QACjI,OAAO,mBAAmB,CAAC,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,4BAAgB,CAAqB,cAAc,CAAC,EAApD,CAAoD,CAAC,CAAC;IAC3G,CAAC;IAED;;OAEG;IACH,oDAAgB,GAAhB,UAAiB,WAAgC;QACvC,IAAA,KAAA,eAA6C,mBAAQ,CAAC,sBAAsB,CAAC,WAAW,IAAI,EAAE,CAAC,IAAA,EAA9F,iBAAiB,QAAA,EAAE,qBAAqB,QAAsD,CAAC;QACtG,IAAM,oBAAoB,kEAAO,iBAAiB,mBAAK,6DAA4B,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,qBAAqB,CAAC,EAAC,CAAC;QACpI,OAAO,8BAAsB,EAAE;aAC1B,iBAAiB,CAAC,oBAAoB,CAAC;aACvC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,4BAAgB,CAAiC,QAAQ,CAAC,MAAM,CAAC,EAAjE,CAAiE,CAAC,CAAC;IAC5F,CAAC;IAED;;OAEG;IACH,wDAAoB,GAApB,UAAqB,QAA+C;QAChE,iEAAiE;QAE3D,IAAA,KAAA,eAA8C,mBAAQ,CAAC,sBAAsB,CAAC,QAAQ,IAAI,EAAE,CAAC,IAAA,EAA5F,sBAAsB,QAAA,EAAE,iBAAiB,QAAmD,CAAC;QACpG,IAAM,aAAa,GAAe,sBAAsB,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,CAAC,WAAW,YAAY,2BAAY,CAAC,KAAK,KAAK,EAA/C,CAA+C,CAAQ,CAAC;QACvI,IAAM,aAAa,GAAwB,sBAAsB,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,YAAY,2BAAY,EAAnC,CAAmC,CAAQ,CAAC;QAEpI,IAAM,gBAAgB,kEAAO,aAAa,mBAAK,6DAA4B,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,iBAAiB,CAAC,EAAC,CAAC;QACxH,gBAAgB,CAAC,OAAO,CAAC,UAAA,WAAW;YAChC,IAAI,WAAW,YAAY,2BAAY,EAAE;gBACrC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACnC;QACL,CAAC,CAAC,CAAC;QACH,IAAM,wBAAwB,GAAG,IAAI,6CAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,8BAAsB,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAE9H,IAAM,6BAA6B,GAAG,IAAI,iDAAuB,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAC7F,IAAM,qBAAqB,GAAG,IAAI,6CAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,6BAA6B,CAAC,CAAC,KAAK,EAAE,CAAC;QAEhH,sEAAW,wBAAwB,mBAAK,qBAAqB,GAAE;IACnE,CAAC;IAEL,gCAAC;AAAD,CAzDA,AAyDC,IAAA;AAzDY,8DAAyB","file":"ConnectionMetadataBuilder.js","sourcesContent":["import {importClassesFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {getFromContainer} from \"../container\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\nimport {EntitySchemaTransformer} from \"../entity-schema/EntitySchemaTransformer\";\nimport {Connection} from \"./Connection\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\n\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    buildMigrations(migrations: (Function|string)[]): MigrationInterface[] {\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n        const allMigrationClasses = [...migrationClasses, ...importClassesFromDirectories(this.connection.logger, migrationDirectories)];\n        return allMigrationClasses.map(migrationClass => getFromContainer<MigrationInterface>(migrationClass));\n    }\n\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    buildSubscribers(subscribers: (Function|string)[]): EntitySubscriberInterface<any>[] {\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n        const allSubscriberClasses = [...subscriberClasses, ...importClassesFromDirectories(this.connection.logger, subscriberDirectories)];\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map(metadata => getFromContainer<EntitySubscriberInterface<any>>(metadata.target));\n    }\n\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    buildEntityMetadatas(entities: (Function|EntitySchema<any>|string)[]): EntityMetadata[] {\n        // todo: instead we need to merge multiple metadata args storages\n\n        const [entityClassesOrSchemas, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n        const entityClasses: Function[] = entityClassesOrSchemas.filter(entityClass => (entityClass instanceof EntitySchema) === false) as any;\n        const entitySchemas: EntitySchema<any>[] = entityClassesOrSchemas.filter(entityClass => entityClass instanceof EntitySchema) as any;\n\n        const allEntityClasses = [...entityClasses, ...importClassesFromDirectories(this.connection.logger, entityDirectories)];\n        allEntityClasses.forEach(entityClass => { // if we have entity schemas loaded from directories\n            if (entityClass instanceof EntitySchema) {\n                entitySchemas.push(entityClass);\n            }\n        });\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    }\n\n}"],"sourceRoot":".."}