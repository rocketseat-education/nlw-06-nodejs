{"version":3,"sources":["../browser/src/find-options/operator/Raw.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAsB7C,MAAM,UAAU,GAAG,CACf,mBAA+D,EAC/D,sBAAsC;IAEtC,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE;QAC3C,OAAO,IAAI,YAAY,CAAC,KAAK,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAC;KAC9D;IAED,OAAO,IAAI,YAAY,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;AAChG,CAAC","file":"Raw.js","sourcesContent":["import {FindOperator} from \"../FindOperator\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw(\"12\") }\n */\nexport function Raw<T>(value: string): FindOperator<any>;\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = 5`) }\n */\nexport function Raw<T>(sqlGenerator: ((columnAlias: string) => string)): FindOperator<any>;\n\n/**\n * Find Options Operator.\n * For escaping parameters use next syntax:\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = :value`, { value: 5 }) }\n */\nexport function Raw<T>(sqlGenerator: ((columnAlias: string) => string), parameters: ObjectLiteral): FindOperator<any>;\n\nexport function Raw<T>(\n    valueOrSqlGenerator: string | ((columnAlias: string) => string),\n    sqlGeneratorParameters?: ObjectLiteral,\n): FindOperator<any> {\n    if (typeof valueOrSqlGenerator !== 'function') {\n        return new FindOperator(\"raw\", valueOrSqlGenerator, false);\n    }\n\n    return new FindOperator(\"raw\", [], true, true, valueOrSqlGenerator, sqlGeneratorParameters);\n}\n"],"sourceRoot":"../.."}