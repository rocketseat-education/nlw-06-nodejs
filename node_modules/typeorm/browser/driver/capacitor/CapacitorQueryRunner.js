import { __awaiter, __extends, __generator } from "tslib";
import { QueryRunnerAlreadyReleasedError } from "../../error/QueryRunnerAlreadyReleasedError";
import { QueryFailedError } from "../../error/QueryFailedError";
import { AbstractSqliteQueryRunner } from "../sqlite-abstract/AbstractSqliteQueryRunner";
import { Broadcaster } from "../../subscriber/Broadcaster";
/**
 * Runs queries on a single sqlite database connection.
 */
var CapacitorQueryRunner = /** @class */ (function (_super) {
    __extends(CapacitorQueryRunner, _super);
    // -------------------------------------------------------------------------
    // Constructor
    // -------------------------------------------------------------------------
    function CapacitorQueryRunner(driver) {
        var _this = _super.call(this) || this;
        _this.driver = driver;
        _this.connection = driver.connection;
        _this.broadcaster = new Broadcaster(_this);
        return _this;
    }
    CapacitorQueryRunner.prototype.executeSet = function (set) {
        return __awaiter(this, void 0, void 0, function () {
            var databaseConnection;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isReleased)
                            throw new QueryRunnerAlreadyReleasedError();
                        return [4 /*yield*/, this.connect()];
                    case 1:
                        databaseConnection = _a.sent();
                        return [2 /*return*/, databaseConnection.executeSet(set, false)];
                }
            });
        });
    };
    /**
     * Executes a given SQL query.
     */
    CapacitorQueryRunner.prototype.query = function (query, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var databaseConnection, pResult, command;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isReleased)
                            throw new QueryRunnerAlreadyReleasedError();
                        return [4 /*yield*/, this.connect()];
                    case 1:
                        databaseConnection = _a.sent();
                        this.driver.connection.logger.logQuery(query, parameters, this);
                        command = query.substr(0, query.indexOf(" "));
                        if ([
                            "PRAGMA",
                            "BEGIN",
                            "ROLLBACK",
                            "COMMIT",
                            "CREATE",
                            "ALTER",
                            "DROP",
                        ].indexOf(command) !== -1) {
                            pResult = databaseConnection.execute(query, false);
                        }
                        else if (["INSERT", "UPDATE", "DELETE"].indexOf(command) !== -1) {
                            pResult = databaseConnection
                                .run(query, parameters, false)
                                .then(function (_a) {
                                var changes = _a.changes;
                                return changes.lastId || changes.changes;
                            });
                        }
                        else {
                            pResult = databaseConnection
                                .query(query, parameters)
                                .then(function (_a) {
                                var values = _a.values;
                                return values;
                            });
                        }
                        return [2 /*return*/, pResult.catch(function (err) {
                                _this.driver.connection.logger.logQueryError(err, query, parameters, _this);
                                throw new QueryFailedError(query, parameters, err);
                            })];
                }
            });
        });
    };
    // -------------------------------------------------------------------------
    // Protected Methods
    // -------------------------------------------------------------------------
    /**
     * Parametrizes given object of values. Used to create column=value queries.
     */
    CapacitorQueryRunner.prototype.parametrize = function (objectLiteral) {
        return Object.keys(objectLiteral).map(function (key) { return "\"" + key + "\"" + "=?"; });
    };
    return CapacitorQueryRunner;
}(AbstractSqliteQueryRunner));
export { CapacitorQueryRunner };

//# sourceMappingURL=CapacitorQueryRunner.js.map
