{"version":3,"sources":["../browser/src/repository/MongoRepository.ts"],"names":[],"mappings":"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","file":"MongoRepository.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {Repository} from \"./Repository\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBulkWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    ObjectID,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult\n} from \"../driver/mongodb/typings\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\n\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nexport class MongoRepository<Entity extends ObjectLiteral> extends Repository<Entity> {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: MongoEntityManager;\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new Error(`Queries aren't supported by MongoDB.`);\n    }\n\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    createQueryBuilder(alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        throw new Error(`Query Builder is not supported by MongoDB.`);\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, optionsOrConditions);\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<[ Entity[], number ]> {\n        return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|Partial<Entity>): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    findOne(optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<Entity>|Partial<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOne(this.metadata.target, optionsOrConditions as any, maybeOptions as any);\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<T = any>(query?: ObjectLiteral): Cursor<T> {\n        return this.manager.createCursor(this.metadata.target, query);\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor(query?: ObjectLiteral): Cursor<Entity> {\n        return this.manager.createEntityCursor(this.metadata.target, query);\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<R = any>(pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<R> {\n        return this.manager.aggregate<R>(this.metadata.target, pipeline, options);\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity(pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\n        return this.manager.aggregateEntity(this.metadata.target, pipeline, options);\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite(operations: ObjectLiteral[], options?: CollectionBulkWriteOptions): Promise<BulkWriteOpResultObject> {\n        return this.manager.bulkWrite(this.metadata.target, operations, options);\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count(query?: ObjectLiteral, options?: MongoCountPreferences): Promise<number> {\n        return this.manager.count(this.metadata.target, query || {}, options);\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex(fieldOrSpec: string|any, options?: MongodbIndexOptions): Promise<string> {\n        return this.manager.createCollectionIndex(this.metadata.target, fieldOrSpec, options);\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes(indexSpecs: ObjectLiteral[]): Promise<void> {\n        return this.manager.createCollectionIndexes(this.metadata.target, indexSpecs);\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        return this.manager.deleteMany(this.metadata.tableName, query, options);\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n        return this.manager.deleteOne(this.metadata.tableName, query, options);\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct(key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference|string }): Promise<any> {\n        return this.manager.distinct(this.metadata.tableName, key, query, options);\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex(indexName: string, options?: CollectionOptions): Promise<any> {\n        return this.manager.dropCollectionIndex(this.metadata.tableName, indexName, options);\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes(): Promise<any> {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName);\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete(query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\n        return this.manager.findOneAndDelete(this.metadata.tableName, query, options);\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace(query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        return this.manager.findOneAndReplace(this.metadata.tableName, query, replacement, options);\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate(query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n        return this.manager.findOneAndUpdate(this.metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\n        return this.manager.geoHaystackSearch(this.metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any> {\n        return this.manager.geoNear(this.metadata.tableName, x, y, options);\n    }\n\n    /**\n     * Run a group command across a collection.\n     */\n    group(keys: Object|Array<any>|Function|Code, condition: Object, initial: Object, reduce: Function|Code, finalize: Function|Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n        return this.manager.group(this.metadata.tableName, keys, condition, initial, reduce, finalize, command, options);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes(): Promise<any> {\n        return this.manager.collectionIndexes(this.metadata.tableName);\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists(indexes: string|string[]): Promise<boolean> {\n        return this.manager.collectionIndexExists(this.metadata.tableName, indexes);\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\n        return this.manager.collectionIndexInformation(this.metadata.tableName, options);\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation {\n        return this.manager.initializeOrderedBulkOp(this.metadata.tableName, options);\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation {\n        return this.manager.initializeUnorderedBulkOp(this.metadata.tableName, options);\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany(docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\n        return this.manager.insertMany(this.metadata.tableName, docs, options);\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne(doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\n        return this.manager.insertOne(this.metadata.tableName, doc, options);\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped(): Promise<any> {\n        return this.manager.isCapped(this.metadata.tableName);\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(options?: { batchSize?: number, readPreference?: ReadPreference|string }): CommandCursor {\n        return this.manager.listCollectionIndexes(this.metadata.tableName, options);\n    }\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    mapReduce(map: Function|string, reduce: Function|string, options?: MapReduceOptions): Promise<any> {\n        return this.manager.mapReduce(this.metadata.tableName, map, reduce, options);\n    }\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\n        return this.manager.parallelCollectionScan(this.metadata.tableName, options);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    reIndex(): Promise<any> {\n        return this.manager.reIndex(this.metadata.tableName);\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection<any>> {\n        return this.manager.rename(this.metadata.tableName, newName, options);\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne(query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        return this.manager.replaceOne(this.metadata.tableName, query, doc, options);\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats(options?: { scale: number }): Promise<CollStats> {\n        return this.manager.stats(this.metadata.tableName, options);\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany(query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\n        return this.manager.updateMany(this.metadata.tableName, query, update, options);\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne(query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n        return this.manager.updateOne(this.metadata.tableName, query, update, options);\n    }\n\n}\n"],"sourceRoot":".."}