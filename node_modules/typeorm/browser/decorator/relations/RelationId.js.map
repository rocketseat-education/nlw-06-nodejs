{"version":3,"sources":["../browser/src/decorator/relations/RelationId.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAqB,MAAM,QAAQ,CAAC;AAGlE;;;;GAIG;AACH,MAAM,UAAU,UAAU,CAAI,QAAqC,EAAE,KAAc,EAAE,mBAA8E;IAC/J,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,sBAAsB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,mBAAmB,EAAE,mBAAmB;SACjB,CAAC,CAAC;IACjC,CAAC,CAAC;AACN,CAAC","file":"RelationId.js","sourcesContent":["import {getMetadataArgsStorage, SelectQueryBuilder} from \"../../\";\nimport {RelationIdMetadataArgs} from \"../../metadata-args/RelationIdMetadataArgs\";\n\n/**\n * Special decorator used to extract relation id into separate entity property.\n *\n * @experimental\n */\nexport function RelationId<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().relationIds.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory\n        } as RelationIdMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."}