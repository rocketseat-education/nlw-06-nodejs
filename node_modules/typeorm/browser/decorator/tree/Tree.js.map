{"version":3,"sources":["../browser/src/decorator/tree/Tree.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,sBAAsB,EAAC,MAAM,QAAQ,CAAC;AAK9C;;;;;GAKG;AACH,MAAM,UAAU,IAAI,CAAC,IAAc,EAAE,OAA4B;IAC7D,OAAO,UAAU,MAAgB;QAE7B,sBAAsB,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;YAChC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;SACtC,CAAC,CAAC;IAC3B,CAAC,CAAC;AACN,CAAC","file":"Tree.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\nimport {TreeMetadataArgs} from \"../../metadata-args/TreeMetadataArgs\";\nimport {TreeType} from \"../../metadata/types/TreeTypes\";\nimport {ClosureTreeOptions} from \"../../metadata/types/ClosureTreeOptions\";\n\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(type: TreeType, options?: ClosureTreeOptions): ClassDecorator {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().trees.push({\n            target: target,\n            type: type,\n            options: type === \"closure-table\" ? options : undefined\n        } as TreeMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."}