{"version":3,"sources":["../browser/src/cache/QueryResultCacheFactory.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,qBAAqB,EAAC,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAC,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AAIxD;;GAEG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,iCAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC5C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,wCAAM,GAAN;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK;YAC9B,MAAM,IAAI,KAAK,CAAC,uKAAuK,CAAC,CAAC;QAE7L,IAAM,KAAK,GAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC;QAEjD,IAAI,KAAK,CAAC,QAAQ,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,UAAU,EAAE;YACxD,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1C;QAED,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAE;YACxF,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;SACjE;aAAM;YACH,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAClD;IACL,CAAC;IAEL,8BAAC;AAAD,CAjCA,AAiCC,IAAA","file":"QueryResultCacheFactory.js","sourcesContent":["import {RedisQueryResultCache} from \"./RedisQueryResultCache\";\nimport {DbQueryResultCache} from \"./DbQueryResultCache\";\nimport {QueryResultCache} from \"./QueryResultCache\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create(): QueryResultCache {\n        if (!this.connection.options.cache)\n            throw new Error(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n\n        const cache: any = this.connection.options.cache;\n\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection);\n        }\n\n        if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\n            return new RedisQueryResultCache(this.connection, cache.type);\n        } else {\n            return new DbQueryResultCache(this.connection);\n        }\n    }\n\n}\n"],"sourceRoot":".."}