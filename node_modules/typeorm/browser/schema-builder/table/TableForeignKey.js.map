{"version":3,"sources":["../browser/src/schema-builder/table/TableForeignKey.ts"],"names":[],"mappings":";AAGA;;GAEG;AACH;IA4CI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,yBAAY,OAA+B;QArC3C;;WAEG;QACH,gBAAW,GAAa,EAAE,CAAC;QAO3B;;WAEG;QACH,0BAAqB,GAAa,EAAE,CAAC;QAyBjC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC,qBAAqB,CAAC;QAC3D,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IACzC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,+BAAK,GAAL;QACI,OAAO,IAAI,eAAe,CAAyB;YAC/C,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,2BAAM,IAAI,CAAC,WAAW,EAAC;YAClC,qBAAqB,2BAAM,IAAI,CAAC,qBAAqB,EAAC;YACtD,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC,CAAC;IACP,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACI,sBAAM,GAAb,UAAc,QAA4B;QACtC,OAAO,IAAI,eAAe,CAAyB;YAC/C,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,WAAW,EAAE,QAAQ,CAAC,WAAW;YACjC,qBAAqB,EAAE,QAAQ,CAAC,qBAAqB;YACrD,mBAAmB,EAAE,QAAQ,CAAC,mBAAmB;YACjD,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,UAAU,EAAE,QAAQ,CAAC,UAAU;SAClC,CAAC,CAAC;IACP,CAAC;IAEL,sBAAC;AAAD,CAhGA,AAgGC,IAAA","file":"TableForeignKey.js","sourcesContent":["import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\nimport {TableForeignKeyOptions} from \"../options/TableForeignKeyOptions\";\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the foreign key constraint.\n     */\n    name?: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[] = [];\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string;\n\n    /**\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being updated.\n     */\n    onUpdate?: string;\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableForeignKeyOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.referencedColumnNames = options.referencedColumnNames;\n        this.referencedTableName = options.referencedTableName;\n        this.onDelete = options.onDelete;\n        this.onUpdate = options.onUpdate;\n        this.deferrable = options.deferrable;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone(): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(metadata: ForeignKeyMetadata): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        });\n    }\n\n}\n"],"sourceRoot":"../.."}