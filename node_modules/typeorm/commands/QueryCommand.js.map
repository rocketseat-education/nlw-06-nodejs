{"version":3,"sources":["../../src/commands/QueryCommand.ts"],"names":[],"mappings":"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","file":"QueryCommand.js","sourcesContent":["import {createConnection} from \"../index\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {Connection} from \"../connection/Connection\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport * as yargs from \"yargs\";\nimport chalk from \"chalk\";\n\n/**\n * Executes an sql query on the given connection.\n */\nexport class QueryCommand implements yargs.CommandModule {\n    command = \"query [query]\";\n    describe = \"Executes given SQL query on a default connection. Specify connection name to run query on a specific connection.\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .positional(\"query\", {\n                describe: \"The SQL Query to run\",\n                type: \"string\"\n            })\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which to run a query.\"\n            })\n            .option(\"f\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n\n        let connection: Connection|undefined = undefined;\n        let queryRunner: QueryRunner|undefined = undefined;\n        try {\n\n            // create a connection\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: false\n            });\n            connection = await createConnection(connectionOptions);\n\n            // create a query runner and execute query using it\n            queryRunner = connection.createQueryRunner();\n            const query = args.query as string;\n            console.log(chalk.green(\"Running query: \") + PlatformTools.highlightSql(query));\n            const queryResult = await queryRunner.query(query);\n\n            if (typeof queryResult === \"undefined\") {\n                console.log(chalk.green(\"Query has been executed. No result was returned.\"));\n            } else {\n                console.log(chalk.green(\"Query has been executed. Result: \"));\n                console.log(PlatformTools.highlightJson(JSON.stringify(queryResult, undefined, 2)));\n            }\n\n            await queryRunner.release();\n            await connection.close();\n\n        } catch (err) {\n            if (queryRunner) await (queryRunner as QueryRunner).release();\n            if (connection) await (connection as Connection).close();\n\n            console.log(chalk.black.bgRed(\"Error during query execution:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n}\n"],"sourceRoot":".."}