{"version":3,"sources":["../../src/commands/MigrationGenerateCommand.ts"],"names":[],"mappings":"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","file":"MigrationGenerateCommand.js","sourcesContent":["import {ConnectionOptionsReader} from \"../connection/ConnectionOptionsReader\";\nimport {CommandUtils} from \"./CommandUtils\";\nimport {createConnection} from \"../index\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {camelCase} from \"../util/StringUtils\";\nimport * as yargs from \"yargs\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport chalk from \"chalk\";\nimport { format } from \"@sqltools/formatter/lib/sqlFormatter\";\n\n/**\n * Generates a new migration file with sql needs to be executed to update schema.\n */\nexport class MigrationGenerateCommand implements yargs.CommandModule {\n\n    command = \"migration:generate\";\n    describe = \"Generates a new migration file with sql needs to be executed to update schema.\";\n    aliases = \"migrations:generate\";\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"c\", {\n                alias: \"connection\",\n                default: \"default\",\n                describe: \"Name of the connection on which run a query.\"\n            })\n            .option(\"n\", {\n                alias: \"name\",\n                describe: \"Name of the migration class.\",\n                demand: true,\n                type: \"string\"\n            })\n            .option(\"d\", {\n                alias: \"dir\",\n                describe: \"Directory where migration should be created.\"\n            })\n            .option(\"p\", {\n                alias: \"pretty\",\n                type: \"boolean\",\n                default: false,\n                describe: \"Pretty-print generated SQL\",\n            })\n            .option(\"f\", {\n                alias: \"config\",\n                default: \"ormconfig\",\n                describe: \"Name of the file with connection configuration.\"\n            })\n            .option(\"o\", {\n                alias: \"outputJs\",\n                type: \"boolean\",\n                default: false,\n                describe: \"Generate a migration file on Javascript instead of Typescript\",\n            })\n            .option(\"dr\", {\n                alias: \"dryrun\",\n                type: \"boolean\",\n                default: false,\n                describe: \"Prints out the contents of the migration instead of writing it to a file\",\n            })\n            .option(\"ch\", {\n                alias: \"check\",\n                type: \"boolean\",\n                default: false,\n                describe: \"Verifies that the current database is up to date and that no migrations are needed. Otherwise exits with code 1.\",\n            });\n    }\n\n    async handler(args: yargs.Arguments) {\n        if (args._[0] === \"migrations:generate\") {\n            console.log(\"'migrations:generate' is deprecated, please use 'migration:generate' instead\");\n        }\n\n        const timestamp = new Date().getTime();\n        const extension = args.outputJs ? \".js\" : \".ts\";\n        const filename = timestamp + \"-\" + args.name + extension;\n        let directory = args.dir;\n\n        // if directory is not set then try to open tsconfig and find default path there\n        if (!directory) {\n            try {\n                const connectionOptionsReader = new ConnectionOptionsReader({\n                    root: process.cwd(),\n                    configName: args.config as any\n                });\n                const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n                directory = connectionOptions.cli ? connectionOptions.cli.migrationsDir : undefined;\n            } catch (err) { }\n        }\n\n        try {\n            const connectionOptionsReader = new ConnectionOptionsReader({\n                root: process.cwd(),\n                configName: args.config as any\n            });\n            const connectionOptions = await connectionOptionsReader.get(args.connection as any);\n            Object.assign(connectionOptions, {\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: false\n            });\n\n            const upSqls: string[] = [], downSqls: string[] = [];\n\n            const connection = await createConnection(connectionOptions);\n            try {\n                const sqlInMemory = await connection.driver.createSchemaBuilder().log();\n\n                if (args.pretty) {\n                    sqlInMemory.upQueries.forEach(upQuery => {\n                        upQuery.query = MigrationGenerateCommand.prettifyQuery(upQuery.query);\n                    });\n                    sqlInMemory.downQueries.forEach(downQuery => {\n                        downQuery.query = MigrationGenerateCommand.prettifyQuery(downQuery.query);\n                    });\n                }\n\n                // mysql is exceptional here because it uses ` character in to escape names in queries, that's why for mysql\n                // we are using simple quoted string instead of template string syntax\n                if (connection.driver instanceof MysqlDriver || connection.driver instanceof AuroraDataApiDriver) {\n                    sqlInMemory.upQueries.forEach(upQuery => {\n                        upSqls.push(\"        await queryRunner.query(\\\"\" + upQuery.query.replace(new RegExp(`\"`, \"g\"), `\\\\\"`) + \"\\\"\" + MigrationGenerateCommand.queryParams(upQuery.parameters) + \");\");\n                    });\n                    sqlInMemory.downQueries.forEach(downQuery => {\n                        downSqls.push(\"        await queryRunner.query(\\\"\" + downQuery.query.replace(new RegExp(`\"`, \"g\"), `\\\\\"`) + \"\\\"\" + MigrationGenerateCommand.queryParams(downQuery.parameters) + \");\");\n                    });\n                } else {\n                    sqlInMemory.upQueries.forEach(upQuery => {\n                        upSqls.push(\"        await queryRunner.query(`\" + upQuery.query.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") + \"`\" + MigrationGenerateCommand.queryParams(upQuery.parameters) + \");\");\n                    });\n                    sqlInMemory.downQueries.forEach(downQuery => {\n                        downSqls.push(\"        await queryRunner.query(`\" + downQuery.query.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") + \"`\" + MigrationGenerateCommand.queryParams(downQuery.parameters) + \");\");\n                    });\n                }\n            } finally {\n                await connection.close();\n            }\n\n            if (!upSqls.length) {\n                if (args.check) {\n                    console.log(chalk.green(`No changes in database schema were found`));\n                    process.exit(0);\n                } else {\n                    console.log(chalk.yellow(`No changes in database schema were found - cannot generate a migration. To create a new empty migration use \"typeorm migration:create\" command`));\n                    process.exit(1);\n                }\n            } else if (!args.name) {\n                console.log(chalk.yellow(\"Please specify a migration name using the `-n` argument\"));\n                process.exit(1);\n            }\n\n            const fileContent = args.outputJs ?\n                MigrationGenerateCommand.getJavascriptTemplate(args.name as any, timestamp, upSqls, downSqls.reverse()) :\n                MigrationGenerateCommand.getTemplate(args.name as any, timestamp, upSqls, downSqls.reverse());\n            const path = process.cwd() + \"/\" + (directory ? (directory + \"/\") : \"\") + filename;\n\n            if (args.check) {\n                console.log(chalk.yellow(`Unexpected changes in database schema were found in check mode:\\n\\n${chalk.white(fileContent)}`));\n                process.exit(1);\n            }\n\n            if (args.dryrun) {\n                console.log(chalk.green(`Migration ${chalk.blue(path)} has content:\\n\\n${chalk.white(fileContent)}`));\n            } else {\n                await CommandUtils.createFile(path, fileContent);\n\n                console.log(chalk.green(`Migration ${chalk.blue(path)} has been generated successfully.`));\n            }\n        } catch (err) {\n            console.log(chalk.black.bgRed(\"Error during migration generation:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats query parameters for migration queries if parameters actually exist\n     */\n    protected static queryParams(parameters: any[] | undefined): string {\n      if (!parameters || !parameters.length) {\n        return \"\";\n      }\n\n      return `, ${JSON.stringify(parameters)}`;\n    }\n\n    /**\n     * Gets contents of the migration file.\n     */\n    protected static getTemplate(name: string, timestamp: number, upSqls: string[], downSqls: string[]): string {\n        const migrationName = `${camelCase(name, true)}${timestamp}`;\n\n        return `import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class ${migrationName} implements MigrationInterface {\n    name = '${migrationName}'\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n${upSqls.join(`\n`)}\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n${downSqls.join(`\n`)}\n    }\n\n}\n`;\n    }\n\n    /**\n     * Gets contents of the migration file in Javascript.\n     */\n    protected static getJavascriptTemplate(name: string, timestamp: number, upSqls: string[], downSqls: string[]): string {\n        const migrationName = `${camelCase(name, true)}${timestamp}`;\n\n        return `const { MigrationInterface, QueryRunner } = require(\"typeorm\");\n\nmodule.exports = class ${migrationName} {\n    name = '${migrationName}'\n\n    async up(queryRunner) {\n${upSqls.join(`\n`)}\n    }\n\n    async down(queryRunner) {\n${downSqls.join(`\n`)}\n    }\n}\n`;\n    }\n\n    /**\n     *\n     */\n    protected static prettifyQuery(query: string) {\n        const formattedQuery = format(query, { indent: \"    \" });\n        return \"\\n\" + formattedQuery.replace(/^/gm, \"            \") + \"\\n        \";\n    }\n}\n"],"sourceRoot":".."}