{"version":3,"sources":["../../src/commands/VersionCommand.ts"],"names":[],"mappings":";;;;AACA,+CAAmC;AAEnC;;GAEG;AACH;IAAA;QACI,YAAO,GAAG,SAAS,CAAC;QACpB,aAAQ,GAAG,2CAA2C,CAAC;IAwC3D,CAAC;IAtCS,gCAAO,GAAb;;;;;4BAEyB,qBAAM,cAAc,CAAC,cAAc,CAAC,oBAAoB,CAAC,EAAA;;wBAAxE,YAAY,GAAG,SAAyD;wBACxE,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;wBACrD,eAAe,GAAG,CAAC,YAAY,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;wBAE7F,qBAAM,cAAc,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAA;;wBAA5E,aAAa,GAAG,SAA4D;wBAC5E,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;wBACvD,gBAAgB,GAAG,CAAC,aAAa,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;wBAEvH,IAAI,eAAe,EAAE;4BACjB,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,eAAe,CAAC,CAAC;yBAC5D;6BAAM;4BACH,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;yBACxD;wBACD,IAAI,gBAAgB,EAAE;4BAClB,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,gBAAgB,CAAC,CAAC;yBACtE;6BAAM;4BACH,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;yBACjD;wBAED,IAAI,eAAe,IAAI,gBAAgB,IAAI,eAAe,KAAK,gBAAgB,EAAE;4BAC7E,OAAO,CAAC,GAAG,CAAC,0FAA0F;gCAClG,mEAAmE,CAAC,CAAC;yBAC5E;;;;;KACJ;IAEgB,6BAAc,GAA/B,UAAgC,OAAe;QAC3C,OAAO,IAAI,OAAO,CAAS,UAAC,EAAE,EAAE,IAAI;YAChC,oBAAI,CAAC,OAAO,EAAE,UAAC,KAAU,EAAE,MAAW,EAAE,MAAW;gBAC/C,IAAI,MAAM;oBAAE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,MAAM;oBAAE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,KAAK;oBAAE,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9B,EAAE,CAAC,EAAE,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,qBAAC;AAAD,CA1CA,AA0CC,IAAA;AA1CY,wCAAc","file":"VersionCommand.js","sourcesContent":["import * as yargs from \"yargs\";\nimport {exec} from \"child_process\";\n\n/**\n * Shows typeorm version.\n */\nexport class VersionCommand implements yargs.CommandModule {\n    command = \"version\";\n    describe = \"Prints TypeORM version this project uses.\";\n\n    async handler() {\n\n        const localNpmList = await VersionCommand.executeCommand(\"npm list --depth=0\");\n        const localMatches = localNpmList.match(/ typeorm@(.*)\\n/);\n        const localNpmVersion = (localMatches && localMatches[1] ? localMatches[1] : \"\").replace(/\"invalid\"/gi, \"\").trim();\n\n        const globalNpmList = await VersionCommand.executeCommand(\"npm list -g --depth=0\");\n        const globalMatches = globalNpmList.match(/ typeorm@(.*)\\n/);\n        const globalNpmVersion = (globalMatches && globalMatches[1] ? globalMatches[1] : \"\").replace(/\"invalid\"/gi, \"\").trim();\n\n        if (localNpmVersion) {\n            console.log(\"Local installed version:\", localNpmVersion);\n        } else {\n            console.log(\"No local installed TypeORM was found.\");\n        }\n        if (globalNpmVersion) {\n            console.log(\"Global installed TypeORM version:\", globalNpmVersion);\n        } else {\n            console.log(\"No global installed was found.\");\n        }\n\n        if (localNpmVersion && globalNpmVersion && localNpmVersion !== globalNpmVersion) {\n            console.log(\"To avoid issues with CLI please make sure your global and local TypeORM versions match, \" +\n                \"or you are using locally installed TypeORM instead of global one.\");\n        }\n    }\n\n    protected static executeCommand(command: string) {\n        return new Promise<string>((ok, fail) => {\n            exec(command, (error: any, stdout: any, stderr: any) => {\n                if (stdout) return ok(stdout);\n                if (stderr) return ok(stderr);\n                if (error) return fail(error);\n                ok(\"\");\n            });\n        });\n    }\n\n}\n"],"sourceRoot":".."}