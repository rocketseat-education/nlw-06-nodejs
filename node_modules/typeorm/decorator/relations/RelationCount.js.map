{"version":3,"sources":["../../src/decorator/relations/RelationCount.ts"],"names":[],"mappings":";;;AAAA,4BAAkE;AAGlE;;;;GAIG;AACH,SAAgB,aAAa,CAAI,QAAqC,EAAE,KAAc,EAAE,mBAA8E;IAClK,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,0BAAsB,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC;YACzC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;YAClB,KAAK,EAAE,KAAK;YACZ,mBAAmB,EAAE,mBAAmB;SACd,CAAC,CAAC;IACpC,CAAC,CAAC;AACN,CAAC;AAXD,sCAWC","file":"RelationCount.js","sourcesContent":["import {getMetadataArgsStorage, SelectQueryBuilder} from \"../../\";\nimport {RelationCountMetadataArgs} from \"../../metadata-args/RelationCountMetadataArgs\";\n\n/**\n * Holds a number of children in the closure table of the column.\n *\n * @deprecated Do not use this decorator, it may be removed in the future versions\n */\nexport function RelationCount<T>(relation: string|((object: T) => any), alias?: string, queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n\n        getMetadataArgsStorage().relationCounts.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            relation: relation,\n            alias: alias,\n            queryBuilderFactory: queryBuilderFactory\n        } as RelationCountMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."}