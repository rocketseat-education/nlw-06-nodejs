{"version":3,"sources":["../../src/decorator/columns/ObjectIdColumn.ts"],"names":[],"mappings":";;;AAAA,4BAA6D;AAG7D;;;GAGG;AACH,SAAgB,cAAc,CAAC,OAAuB;IAClD,OAAO,UAAU,MAAc,EAAE,YAAoB;QAEjD,kEAAkE;QAClE,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAmB,CAAC;QAC5C,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI;YAAE,OAAO,CAAC,IAAI,GAAI,KAAK,CAAC;QAEzC,4CAA4C;QAC5C,0BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,OAAO;SACG,CAAC,CAAC;IAC7B,CAAC,CAAC;AACN,CAAC;AAhBD,wCAgBC","file":"ObjectIdColumn.js","sourcesContent":["import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Special type of column that is available only for MongoDB database.\n * Marks your entity's column to be an object id.\n */\nexport function ObjectIdColumn(options?: ColumnOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n        options.primary = true;\n        if (!options.name) options.name =  \"_id\";\n\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"objectId\",\n            options: options\n        } as ColumnMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."}