{"version":3,"sources":["../../src/decorator/transaction/TransactionRepository.ts"],"names":[],"mappings":";;;AAAA,4BAA8C;AAE9C,2GAAwG;AAExG;;GAEG;AACH,SAAgB,qBAAqB,CAAC,UAAqB;IACvD,OAAO,UAAC,MAAc,EAAE,UAAkB,EAAE,KAAa;QAErD,sBAAsB;QACtB,IAAI,cAAwB,CAAC;QAC7B,IAAI;YACA,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC,mBAAmB,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;SAC3F;QAAC,OAAO,GAAG,EAAE;YACV,MAAM,IAAI,6EAAqC,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;SACnF;QAED,0BAAsB,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC;YAClD,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,UAAU,YAAA;YACV,KAAK,OAAA;YACL,cAAc,gBAAA;YACd,UAAU,YAAA;SACwB,CAAC,CAAC;IAC5C,CAAC,CAAC;AACN,CAAC;AAnBD,sDAmBC","file":"TransactionRepository.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\nimport {TransactionRepositoryMetadataArgs} from \"../../metadata-args/TransactionRepositoryMetadataArgs\";\nimport {CannotReflectMethodParameterTypeError} from \"../../error/CannotReflectMethodParameterTypeError\";\n\n/**\n * Injects transaction's repository into the method wrapped with @Transaction decorator.\n */\nexport function TransactionRepository(entityType?: Function): ParameterDecorator {\n    return (object: Object, methodName: string, index: number) => {\n\n        // get repository type\n        let repositoryType: Function;\n        try {\n            repositoryType = Reflect.getOwnMetadata(\"design:paramtypes\", object, methodName)[index];\n        } catch (err) {\n            throw new CannotReflectMethodParameterTypeError(object.constructor, methodName);\n        }\n        \n        getMetadataArgsStorage().transactionRepositories.push({\n            target: object.constructor,\n            methodName,\n            index,\n            repositoryType,\n            entityType,\n        } as TransactionRepositoryMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."}