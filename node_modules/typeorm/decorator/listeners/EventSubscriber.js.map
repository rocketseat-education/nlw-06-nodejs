{"version":3,"sources":["../../src/decorator/listeners/EventSubscriber.ts"],"names":[],"mappings":";;;AAAA,4BAA8C;AAG9C;;;GAGG;AACH,SAAgB,eAAe;IAC3B,OAAO,UAAU,MAAgB;QAE7B,0BAAsB,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;YAC5C,MAAM,EAAE,MAAM;SACe,CAAC,CAAC;IACvC,CAAC,CAAC;AACN,CAAC;AAPD,0CAOC","file":"EventSubscriber.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\nimport {EntitySubscriberMetadataArgs} from \"../../metadata-args/EntitySubscriberMetadataArgs\";\n\n/**\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\n * occurs. Those classes must implement EventSubscriberInterface interface.\n */\nexport function EventSubscriber(): ClassDecorator {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().entitySubscribers.push({\n            target: target\n        } as EntitySubscriberMetadataArgs);\n    };\n}"],"sourceRoot":"../.."}