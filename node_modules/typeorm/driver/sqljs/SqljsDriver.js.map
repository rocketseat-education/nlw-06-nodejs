{"version":3,"sources":["../../src/driver/sqljs/SqljsDriver.ts"],"names":[],"mappings":"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","file":"SqljsDriver.js","sourcesContent":["import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {SqljsConnectionOptions} from \"./SqljsConnectionOptions\";\nimport {SqljsQueryRunner} from \"./SqljsQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n// This is needed to satisfy the typescript compiler.\ninterface Window {\n    SQL: any;\n    localforage: any;\n}\ndeclare var window: Window;\n\nexport class SqljsDriver extends AbstractSqliteDriver {\n    // The driver specific options.\n    options: SqljsConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (this.options.autoSave && !this.options.location && !this.options.autoSaveCallback) {\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`);\n        }\n\n        // load sql.js package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection.close();\n                ok();\n            }\n            catch (e)  {\n                fail(e);\n            }\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new SqljsQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    async load(fileNameOrLocalStorageOrData: string | Uint8Array, checkIfFileOrLocalStorageExists: boolean = true): Promise<any> {\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\n            // content has to be loaded\n            if (PlatformTools.type === \"node\") {\n                // Node.js\n                // fileNameOrLocalStorageOrData should be a path to the file\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                    const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n                    return this.createDatabaseConnectionWithImport(database);\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing an existing file.\n                    // File will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n            else {\n                // browser\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n                let localStorageContent = null;\n                if (this.options.useLocalForage) {\n                    if (window.localforage) {\n                        localStorageContent = await window.localforage.getItem(fileNameOrLocalStorageOrData);\n                    } else {\n                        throw new Error(`localforage is not defined - please import localforage.js into your site`);\n                    }\n                } else {\n                    localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n                }\n\n                if (localStorageContent != null) {\n                    // localStorage value exists.\n                    return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing anything.\n                    // localStorage value will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n        }\n        else {\n            return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\n        }\n    }\n\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    async save(location?: string) {\n        if (!location && !this.options.location) {\n            throw new Error(`No location is set, specify a location parameter or add the location option to your configuration`);\n        }\n\n        let path = \"\";\n        if (location) {\n            path = location;\n        }\n        else if (this.options.location) {\n            path = this.options.location;\n        }\n\n        if (PlatformTools.type === \"node\") {\n            try {\n                const content = Buffer.from(this.databaseConnection.export());\n                await PlatformTools.writeFile(path, content);\n            }\n            catch (e) {\n                throw new Error(`Could not save database, error: ${e}`);\n            }\n        }\n        else {\n            const database: Uint8Array = this.databaseConnection.export();\n            // convert Uint8Array to number array to improve local-storage storage\n            const databaseArray = [].slice.call(database);\n            if (this.options.useLocalForage) {\n                if (window.localforage) {\n                    await window.localforage.setItem(path, JSON.stringify(databaseArray));\n                } else {\n                    throw new Error(`localforage is not defined - please import localforage.js into your site`);\n                }\n            } else {\n                PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n            }\n        }\n    }\n\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     */\n    async autoSave() {\n        if (this.options.autoSave) {\n            if (this.options.autoSaveCallback) {\n                await this.options.autoSaveCallback(this.export());\n            }\n            else {\n                await this.save();\n            }\n        }\n    }\n\n    /**\n     * Returns the current database as Uint8Array.\n     */\n    export(): Uint8Array {\n        return this.databaseConnection.export();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n            if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\n                const query = \"SELECT last_insert_rowid()\";\n                try {\n                    let result = this.databaseConnection.exec(query);\n                    this.connection.logger.logQuery(query);\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n                }\n                catch (e) {\n                    this.connection.logger.logQueryError(e, query, []);\n                }\n            }\n\n            return map;\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    protected createDatabaseConnection(): Promise<any> {\n        if (this.options.location) {\n            return this.load(this.options.location, false);\n        }\n\n        return this.createDatabaseConnectionWithImport(this.options.database);\n    }\n\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    protected async createDatabaseConnectionWithImport(database?: Uint8Array): Promise<any> {\n        // sql.js < 1.0 exposes an object with a `Database` method.\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\";\n        const sqlite = isLegacyVersion ? this.sqlite : await this.sqlite(this.options.sqlJsConfig);\n        if (database && database.length > 0) {\n            this.databaseConnection = new sqlite.Database(database);\n        }\n        else {\n            this.databaseConnection = new sqlite.Database();\n        }\n\n        // Enable foreign keys for database\n        return new Promise<any>((ok, fail) => {\n            try {\n                this.databaseConnection.exec(`PRAGMA foreign_keys = ON;`);\n                ok(this.databaseConnection);\n            }\n            catch (e) {\n                fail(e);\n            }\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        if (PlatformTools.type === \"browser\") {\n            this.sqlite = window.SQL;\n        }\n        else {\n            try {\n                this.sqlite = PlatformTools.load(\"sql.js\");\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n            }\n        }\n    }\n}\n"],"sourceRoot":"../.."}