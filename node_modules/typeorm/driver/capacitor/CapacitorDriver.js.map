{"version":3,"sources":["../../src/driver/capacitor/CapacitorDriver.ts"],"names":[],"mappings":";;;;AAAA,gFAA+E;AAE/E,+DAA8D;AAG9D,qCAGqB;AAGrB;IAAqC,2CAAoB;IAIrD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,yBAAY,UAAsB;QAAlC,YACI,kBAAM,UAAU,CAAC,SAapB;QAXG,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACtC,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAElC,kDAAkD;QAClD,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,QAAQ;YACtB,MAAM,IAAI,+BAAuB,CAAC,UAAU,CAAC,CAAC;QAElD,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,MAAM;YAAE,MAAM,IAAI,+BAAuB,CAAC,QAAQ,CAAC,CAAC;QAEtE,sBAAsB;QACtB,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC;;IACtC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACG,iCAAO,GAAb;;;;;wBACI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;wBAC1D,qBAAM,IAAI,CAAC,kBAAkB,EAAA;;wBAA7B,SAA6B,CAAC;;;;;KACjC;IAED;;OAEG;IACG,oCAAU,GAAhB;;;;;;;wBACI,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;wBACF,qBAAM,IAAI,CAAC,kBAAkB,EAAA;;wBAAlD,kBAAkB,GAAG,SAA6B;wBACxD,sBAAO,kBAAkB,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;gCACnC,KAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;4BACxC,CAAC,CAAC,EAAC;;;;KACN;IAED;;OAEG;IACH,2CAAiB,GAAjB,UAAkB,IAAqB;QACnC,IAAI,CAAC,IAAI,CAAC,WAAW;YACjB,IAAI,CAAC,WAAW,GAAG,IAAI,2CAAoB,CAAC,IAAI,CAAC,CAAC;QAEtD,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACa,kDAAwB,GAAxC;;;;;4BACuB,qBAAM,IAAI,CAAC,MAAM,CAAC,gBAAgB,CACjD,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,KAAK,EACL,eAAe,EACf,CAAC,CACJ,EAAA;;wBALK,UAAU,GAAG,SAKlB;wBACD,qBAAM,UAAU,CAAC,IAAI,EAAE,EAAA;;wBAAvB,SAAuB,CAAC;wBACxB,yFAAyF;wBACzF,kEAAkE;wBAClE,qBAAM,UAAU,CAAC,OAAO,CAAC,2BAA2B,CAAC,EAAA;;wBAFrD,yFAAyF;wBACzF,kEAAkE;wBAClE,SAAqD,CAAC;wBACtD,sBAAO,UAAU,EAAC;;;;KACrB;IAES,0CAAgB,GAA1B;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,MAAM,IAAI,sCAA8B,CACpC,WAAW,EACX,6BAA6B,CAChC,CAAC;SACL;IACL,CAAC;IACL,sBAAC;AAAD,CAvFA,AAuFC,CAvFoC,2CAAoB,GAuFxD;AAvFY,0CAAe","file":"CapacitorDriver.js","sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CapacitorConnectionOptions } from \"./CapacitorConnectionOptions\";\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\";\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\nimport { Connection } from \"../../connection/Connection\";\nimport {\n    DriverOptionNotSetError,\n    DriverPackageNotInstalledError,\n} from \"../../error\";\nimport { ReplicationMode } from \"../types/ReplicationMode\";\n\nexport class CapacitorDriver extends AbstractSqliteDriver {\n    driver: any;\n    options: CapacitorConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.database = this.options.database;\n        this.driver = this.options.driver;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.driver) throw new DriverOptionNotSetError(\"driver\");\n\n        // load sqlite package\n        this.sqlite = this.options.driver;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = this.createDatabaseConnection();\n        await this.databaseConnection;\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined;\n        const databaseConnection = await this.databaseConnection;\n        return databaseConnection.close().then(() => {\n            this.databaseConnection = undefined;\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new CapacitorQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const connection = await this.sqlite.createConnection(\n            this.options.database,\n            false,\n            \"no-encryption\",\n            1\n        );\n        await connection.open();\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await connection.execute(`PRAGMA foreign_keys = ON;`);\n        return connection;\n    }\n\n    protected loadDependencies(): void {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\n                \"Capacitor\",\n                \"@capacitor-community/sqlite\"\n            );\n        }\n    }\n}\n"],"sourceRoot":"../.."}