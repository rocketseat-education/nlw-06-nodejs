{"version":3,"sources":["../../src/driver/capacitor/CapacitorQueryRunner.ts"],"names":[],"mappings":"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","file":"CapacitorQueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { CapacitorDriver } from \"./CapacitorDriver\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { ObjectLiteral } from \"../..\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: CapacitorDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: CapacitorDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    async executeSet(set: { statement: string; values?: any[] }[]) {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n\n        const databaseConnection = await this.connect();\n\n        return databaseConnection.executeSet(set, false);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n\n        const databaseConnection = await this.connect();\n\n        this.driver.connection.logger.logQuery(query, parameters, this);\n\n        let pResult: Promise<any>;\n        const command = query.substr(0, query.indexOf(\" \"));\n\n        if (\n            [\n                \"PRAGMA\",\n                \"BEGIN\",\n                \"ROLLBACK\",\n                \"COMMIT\",\n                \"CREATE\",\n                \"ALTER\",\n                \"DROP\",\n            ].indexOf(command) !== -1\n        ) {\n            pResult = databaseConnection.execute(query, false);\n        } else if ([\"INSERT\", \"UPDATE\", \"DELETE\"].indexOf(command) !== -1) {\n            pResult = databaseConnection\n                .run(query, parameters, false)\n                .then(\n                    ({\n                        changes,\n                    }: {\n                        changes: { changes?: number; lastId?: number };\n                    }) => changes.lastId || changes.changes\n                );\n        } else {\n            pResult = databaseConnection\n                .query(query, parameters)\n                .then(({ values }: { values: any[] }) => values);\n        }\n\n        return pResult.catch((err: any) => {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this\n            );\n            throw new QueryFailedError(query, parameters, err);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map((key) => `\"${key}\"` + \"=?\");\n    }\n}\n"],"sourceRoot":"../.."}