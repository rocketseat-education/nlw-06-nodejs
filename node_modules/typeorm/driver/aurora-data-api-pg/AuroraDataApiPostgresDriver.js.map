{"version":3,"sources":["../../src/driver/aurora-data-api-pg/AuroraDataApiPostgresDriver.ts"],"names":[],"mappings":"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","file":"AuroraDataApiPostgresDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {PostgresDriver} from \"../postgres/PostgresDriver\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {AuroraDataApiPostgresConnectionOptions} from \"../aurora-data-api-pg/AuroraDataApiPostgresConnectionOptions\";\nimport {AuroraDataApiPostgresQueryRunner} from \"../aurora-data-api-pg/AuroraDataApiPostgresQueryRunner\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\n\nabstract class PostgresWrapper extends PostgresDriver {\n    options: any;\n\n    abstract createQueryRunner(mode: ReplicationMode): any;\n}\n\nexport class AuroraDataApiPostgresDriver extends PostgresWrapper implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Aurora Data API underlying library.\n     */\n    DataApiDriver: any;\n\n    client: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: AuroraDataApiPostgresConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super();\n        this.connection = connection;\n        this.options = connection.options as AuroraDataApiPostgresConnectionOptions;\n        this.isReplicated = false;\n\n        // load data-api package\n        this.loadDependencies();\n\n        this.client = new this.DataApiDriver(\n            this.options.region,\n            this.options.secretArn,\n            this.options.resourceArn,\n            this.options.database,\n            (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\n            this.options.serviceConfigOptions,\n            this.options.formatOptions,\n        );\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new AuroraDataApiPostgresQueryRunner(\n            this,\n            new this.DataApiDriver(\n                this.options.region,\n                this.options.secretArn,\n                this.options.resourceArn,\n                this.options.database,\n                (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\n                this.options.serviceConfigOptions,\n                this.options.formatOptions,\n            ),\n            mode\n        );\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n            return super.preparePersistentValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        return this.client.preparePersistentValue(value, columnMetadata)\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n            return super.prepareHydratedValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return this.client.prepareHydratedValue(value, columnMetadata)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        const { pg } = PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n\n        this.DataApiDriver = pg;\n    }\n\n    /**\n     * Executes given query.\n     */\n    protected executeQuery(connection: any, query: string) {\n        return this.connection.query(query);\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect(): Promise<void> {\n        const extensionsMetadata = await this.checkMetadataForExtensions();\n\n        if (extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, this.connection);\n        }\n\n        return Promise.resolve();\n    }\n}\n"],"sourceRoot":"../.."}