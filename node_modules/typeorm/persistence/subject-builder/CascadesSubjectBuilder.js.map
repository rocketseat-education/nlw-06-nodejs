{"version":3,"sources":["../../src/persistence/subject-builder/CascadesSubjectBuilder.ts"],"names":[],"mappings":"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","file":"CascadesSubjectBuilder.js","sourcesContent":["import {Subject} from \"../Subject\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Finds all cascade operations of the given subject and cascade operations of the found cascaded subjects,\n * e.g. builds a cascade tree and creates a subjects for them.\n */\nexport class CascadesSubjectBuilder {\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected allSubjects: Subject[]) {\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds a cascade subjects tree and pushes them in into the given array of subjects.\n     */\n    build(subject: Subject, operationType: \"save\"|\"remove\"|\"soft-remove\"|\"recover\") {\n\n        subject.metadata\n            .extractRelationValuesFromEntity(subject.entity!, subject.metadata.relations) // todo: we can create EntityMetadata.cascadeRelations\n            .forEach(([relation, relationEntity, relationEntityMetadata]) => {\n\n                // we need only defined values and insert, update, soft-remove or recover cascades of the relation should be set\n                if (relationEntity === undefined ||\n                    relationEntity === null ||\n                    (!relation.isCascadeInsert && !relation.isCascadeUpdate && !relation.isCascadeSoftRemove && !relation.isCascadeRecover))\n                    return;\n\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we don't really need to check cascades since there is no object to insert or update\n                if (!(relationEntity instanceof Object))\n                    return;\n\n                // if we already has this entity in list of operated subjects then skip it to avoid recursion\n                const alreadyExistRelationEntitySubject = this.findByPersistEntityLike(relationEntityMetadata.target, relationEntity);\n                if (alreadyExistRelationEntitySubject) {\n                    if (alreadyExistRelationEntitySubject.canBeInserted === false) // if its not marked for insertion yet\n                        alreadyExistRelationEntitySubject.canBeInserted = relation.isCascadeInsert === true && operationType === \"save\";\n                    if (alreadyExistRelationEntitySubject.canBeUpdated === false) // if its not marked for update yet\n                        alreadyExistRelationEntitySubject.canBeUpdated = relation.isCascadeUpdate === true && operationType === \"save\";\n                    if (alreadyExistRelationEntitySubject.canBeSoftRemoved === false) // if its not marked for removal yet\n                        alreadyExistRelationEntitySubject.canBeSoftRemoved = relation.isCascadeSoftRemove === true && operationType === \"soft-remove\";\n                    if (alreadyExistRelationEntitySubject.canBeRecovered === false) // if its not marked for recovery yet\n                        alreadyExistRelationEntitySubject.canBeRecovered = relation.isCascadeRecover === true && operationType === \"recover\";\n                    return;\n                }\n\n                // mark subject with what we can do with it\n                // and add to the array of subjects to load only if there is no same entity there already\n                const relationEntitySubject = new Subject({\n                    metadata: relationEntityMetadata,\n                    parentSubject: subject,\n                    entity: relationEntity,\n                    canBeInserted: relation.isCascadeInsert === true && operationType === \"save\",\n                    canBeUpdated: relation.isCascadeUpdate === true && operationType === \"save\",\n                    canBeSoftRemoved: relation.isCascadeSoftRemove === true && operationType === \"soft-remove\",\n                    canBeRecovered: relation.isCascadeRecover === true && operationType === \"recover\"\n                });\n                this.allSubjects.push(relationEntitySubject);\n\n                // go recursively and find other entities we need to insert/update\n                this.build(relationEntitySubject, operationType);\n            });\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Finds subject where entity like given subject's entity.\n     * Comparision made by entity id.\n     */\n    protected findByPersistEntityLike(entityTarget: Function|string, entity: ObjectLiteral): Subject|undefined {\n        return this.allSubjects.find(subject => {\n            if (!subject.entity)\n                return false;\n\n            if (subject.entity === entity)\n                return true;\n\n            return subject.metadata.target === entityTarget && subject.metadata.compareEntities(subject.entityWithFulfilledIds!, entity);\n        });\n    }\n\n}"],"sourceRoot":"../.."}